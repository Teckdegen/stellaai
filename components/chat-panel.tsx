"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, Sparkles, Loader2 } from "lucide-react"
import { useChat } from "@ai-sdk/react"

interface ChatPanelProps {
  projectId: string
  onCodeUpdate: (code: string, reason?: string) => void
  currentCode: string
  contractName: string
  network: string
}

export function ChatPanel({ projectId, onCodeUpdate, currentCode, contractName, network }: ChatPanelProps) {
  const scrollRef = useRef<HTMLDivElement>(null)
  const [lastProcessedMessage, setLastProcessedMessage] = useState<string>("")

  const { messages, input, handleInputChange, handleSubmit, isLoading, setInput } = useChat({
    api: "/api/chat",
    body: {
      contractName,
      network,
      currentCode,
    },
    initialMessages: [
      {
        id: "welcome",
        role: "assistant",
        content: `Hello! I'm Stella, your expert Clarity smart contract assistant for the Stacks blockchain. I can help you build secure, efficient, and standards-compliant contracts.\n\nTell me what you'd like to create, and I'll generate production-ready code for you.\n\nExamples:\n- "Create a SIP-009 compliant NFT contract with minting"\n- "Add staking functionality with time-based rewards"\n- "Create a marketplace with royalties and escrow"\n- "Implement a DAO with proposal voting"\n\nI'll validate your code for syntax, security, and best practices as we work together!`,
      },
    ],
  })

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight
    }
  }, [messages])

  // Extract code from AI responses
  useEffect(() => {
    const lastMessage = messages[messages.length - 1]
    if (lastMessage && lastMessage.role === "assistant" && lastMessage.content !== lastProcessedMessage) {
      setLastProcessedMessage(lastMessage.content)

      const content = lastMessage.content

      // Check if response contains Clarity code
      const hasDefine = content.includes("define-")
      const hasBegin = content.includes("(begin")
      const hasLet = content.includes("(let")

      if (hasDefine || hasBegin || hasLet) {
        // Try to extract code from markdown blocks first
        const codeBlockMatch = content.match(/```(?:clarity)?\n([\s\S]*?)```/)

        if (codeBlockMatch) {
          // Code is in markdown block
          const code = codeBlockMatch[1].trim()
          const explanation = content.replace(/```(?:clarity)?\n[\s\S]*?```/, "").trim()
          onCodeUpdate(code, explanation || "Code updated by Stella AI")
        } else if (!content.includes("```") && (hasDefine || hasBegin)) {
          // Response is pure code (no markdown)
          onCodeUpdate(content, "Code generated by Stella AI")
        }
      }
    }
  }, [messages, lastProcessedMessage, onCodeUpdate])

  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    handleSubmit(e)
  }

  return (
    <div className="flex flex-col h-full bg-card">
      {/* Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-center gap-2">
          <Sparkles className="w-4 h-4 text-primary" />
          <h2 className="font-semibold text-sm">Stella AI</h2>
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4" ref={scrollRef}>
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
              <div
                className={`max-w-[85%] rounded-lg px-3 py-2 text-sm ${
                  message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted text-foreground"
                }`}
              >
                <p className="whitespace-pre-wrap">{message.content}</p>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-muted rounded-lg px-3 py-2">
                <div className="flex items-center gap-2">
                  <Loader2 className="w-3 h-3 animate-spin" />
                  <span className="text-xs text-muted-foreground">Stella is thinking...</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input */}
      <div className="p-4 border-t border-border">
        <form onSubmit={onSubmit} className="flex gap-2">
          <Textarea
            placeholder="Describe what you want to build... (e.g., 'Create an NFT contract with minting and SIP-009 compliance')"
            value={input}
            onChange={handleInputChange}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault()
                onSubmit(e as any)
              }
            }}
            className="min-h-[60px] resize-none"
            disabled={isLoading}
          />
          <Button type="submit" size="icon" disabled={!input.trim() || isLoading}>
            {isLoading ? <Loader2 className="w-4 h-4 animate-spin" /> : <Send className="w-4 h-4" />}
          </Button>
        </form>
        <p className="text-xs text-muted-foreground mt-2">Press Enter to send, Shift+Enter for new line</p>
      </div>
    </div>
  )
}